{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "phg-eval-datafactory"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"Control_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Control'"
		},
		"DataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLake'"
		},
		"SqlServer_OnPrem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_OnPrem'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName}"
		},
		"SqlServer_OnPrem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer_OnPrem'"
		},
		"phg_eval_dataverse_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'phg_eval_dataverse'"
		},
		"DataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://phgevalstoragedatalake.dfs.core.windows.net/"
		},
		"SqlServer_OnPrem_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "GROUPICT\\stuart.mcnicholas"
		},
		"phg_eval_dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "1bafd450-9ac7-4646-b5d1-7dd54a8a6502"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Config')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transaction Currency",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "createdby",
											"type": "Guid"
										},
										"sink": {
											"name": "createdby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdbyname",
											"type": "String"
										},
										"sink": {
											"name": "createdbyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdbyyominame",
											"type": "String"
										},
										"sink": {
											"name": "createdbyyominame",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "createdon",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdonbehalfby",
											"type": "Guid"
										},
										"sink": {
											"name": "createdonbehalfby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdonbehalfbyname",
											"type": "String"
										},
										"sink": {
											"name": "createdonbehalfbyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdonbehalfbyyominame",
											"type": "String"
										},
										"sink": {
											"name": "createdonbehalfbyyominame",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currencyname",
											"type": "String"
										},
										"sink": {
											"name": "currencyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currencyprecision",
											"type": "Int32"
										},
										"sink": {
											"name": "currencyprecision",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currencysymbol",
											"type": "String"
										},
										"sink": {
											"name": "currencysymbol",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "entityimage_timestamp",
											"type": "Int64"
										},
										"sink": {
											"name": "entityimage_timestamp",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "entityimage_url",
											"type": "String"
										},
										"sink": {
											"name": "entityimage_url",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "entityimageid",
											"type": "Guid"
										},
										"sink": {
											"name": "entityimageid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "exchangerate",
											"type": "Decimal"
										},
										"sink": {
											"name": "exchangerate",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "importsequencenumber",
											"type": "Int32"
										},
										"sink": {
											"name": "importsequencenumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isocurrencycode",
											"type": "String"
										},
										"sink": {
											"name": "isocurrencycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedby",
											"type": "Guid"
										},
										"sink": {
											"name": "modifiedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedbyname",
											"type": "String"
										},
										"sink": {
											"name": "modifiedbyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedbyyominame",
											"type": "String"
										},
										"sink": {
											"name": "modifiedbyyominame",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "modifiedon",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedonbehalfby",
											"type": "Guid"
										},
										"sink": {
											"name": "modifiedonbehalfby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedonbehalfbyname",
											"type": "String"
										},
										"sink": {
											"name": "modifiedonbehalfbyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedonbehalfbyyominame",
											"type": "String"
										},
										"sink": {
											"name": "modifiedonbehalfbyyominame",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "organizationid",
											"type": "Guid"
										},
										"sink": {
											"name": "organizationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "overriddencreatedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "overriddencreatedon",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "statecode",
											"type": "Int32"
										},
										"sink": {
											"name": "statecode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "statuscode",
											"type": "Int32"
										},
										"sink": {
											"name": "statuscode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "uniquedscid",
											"type": "Guid"
										},
										"sink": {
											"name": "uniquedscid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "versionnumber",
											"type": "Int64"
										},
										"sink": {
											"name": "versionnumber",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Dataverse_Eval",
								"type": "DatasetReference",
								"parameters": {
									"EntityName": "transactioncurrency"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference",
								"parameters": {
									"Container": "data-sync",
									"Directory": "OH_D365_DataSync/D365",
									"Filename": "transactioncurrency.csv"
								}
							}
						]
					},
					{
						"name": "String Map",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n\t<entity name=\"stringmap\">\t\t\n\t\t\n\t\t<attribute name=\"attributename\"/>\t\t\n\t\t<attribute name=\"attributevalue\"/>\n\t\t<attribute name=\"objecttypecode\"/>\n\t\t<attribute name=\"value\"/>\n\n\t\t<filter type=\"and\">\n\t\t\t<condition attribute=\"attributename\" operator=\"like\" value=\"phg_%\"/>\n\t\t</filter>\n\t\t\n\t</entity>\n</fetch>\n"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "attributename",
											"type": "String"
										},
										"sink": {
											"name": "attributename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "attributevalue",
											"type": "Int32"
										},
										"sink": {
											"name": "attributevalue",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "objecttypecode",
											"type": "String"
										},
										"sink": {
											"name": "objecttypecode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "value",
											"type": "String"
										},
										"sink": {
											"name": "value",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "stringmapid",
											"type": "Guid"
										},
										"sink": {
											"name": "stringmapid",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Dataverse_Eval",
								"type": "DatasetReference",
								"parameters": {
									"EntityName": "stringmap"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Datalake_CommaDelimited",
								"type": "DatasetReference",
								"parameters": {
									"Container": "data-sync",
									"Directory": "OH_D365_DataSync/D365",
									"Filename": "stringmap.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse_Eval')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_CommaDelimited')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Control')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SequenceGroups - Reference",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SourceSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Reference"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Reference",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SequenceGroups - Reference",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SequenceGroups - Reference').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Reference Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ReferenceEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SourceSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SourceSystems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SourceSystems').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "D365_TransactionCurrency to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"transactioncurrencyid"
												]
											},
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "transactioncurrencyid",
														"type": "Guid"
													},
													"sink": {
														"name": "transactioncurrencyid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "isocurrencycode",
														"type": "String"
													},
													"sink": {
														"name": "isocurrencycode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "currencyname",
														"type": "String"
													},
													"sink": {
														"name": "currencyname",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse_Eval",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": "transactioncurrency"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": "transactioncurrency"
											}
										}
									]
								},
								{
									"name": "D365_StringMap to SQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "D365_TransactionCurrency to SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": "<fetch>\r\n\t<entity name=\"stringmap\">\t\t\r\n\t\t\r\n\t\t<attribute name=\"attributename\"/>\t\t\r\n\t\t<attribute name=\"attributevalue\"/>\r\n\t\t<attribute name=\"objecttypecode\"/>\r\n\t\t<attribute name=\"value\"/>\r\n\r\n\t\t<filter type=\"and\">\r\n\t\t\t<condition attribute=\"attributename\" operator=\"like\" value=\"phg_%\"/>\r\n\t\t</filter>\r\n\t\t\r\n\t</entity>\r\n</fetch>\r\n"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"stringmapid"
												]
											},
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "attributename",
														"type": "String"
													},
													"sink": {
														"name": "attributename",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "attributevalue",
														"type": "Int32"
													},
													"sink": {
														"name": "attributevalue",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "objecttypecode",
														"type": "String"
													},
													"sink": {
														"name": "objecttypecode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "value",
														"type": "String"
													},
													"sink": {
														"name": "value",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "stringmapid",
														"type": "Guid"
													},
													"sink": {
														"name": "stringmapid",
														"type": "Guid"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse_Eval",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": "stringmap"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": "stringmap"
											}
										}
									]
								},
								{
									"name": "Reference Entity Code Map to SQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "D365_StringMap to SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": "truncate table adf.ReferenceEntityCodeMap",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "SourceSystem",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SourceSystem",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "SourceSchema",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SourceSchema",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "SourceTable",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SourceTable",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "SourceCode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SourceCode",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Entity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Entity",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityQualifiedName",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EntityQualifiedName",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityCode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EntityCode",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "EntityValue",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "EntityValue",
														"type": "String",
														"physicalType": "nvarchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Excel_ReferenceEntityCodeMap",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "adf",
												"TableName": "ReferenceEntityCodeMap"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "SourceSystems",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SourceSystems]",
								"storedProcedureParameters": {
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroups - Core",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SequenceGroup - Reference",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_SequenceGroups]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SequenceGroup - Core",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SequenceGroups - Core",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SequenceGroups - Core').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Core Entities",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_CoreEntities",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@item().Pipeline",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SrcSystem",
												"type": "Expression"
											},
											"SequenceGroup": {
												"value": "@item().SequenceGroup",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string",
						"defaultValue": "OH_D365_DataSync"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:03:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ReferenceEntities')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse_Eval')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel_ReferenceEntityCodeMap')]",
				"[concat(variables('factoryId'), '/pipelines/PL_CoreEntities')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CoreEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Core_Entities",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Core"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Core_Entities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Core_Entities').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Staging",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Staging",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Source to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "DateTime",
													"value": {
														"value": "@convertToUtc('01/01/2023 00:00:00', 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Staging",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Transformed",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Switch Entity",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Source to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().Entity",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Property",
												"activities": [
													{
														"name": "Stg_to_Trfd - Property",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.00:10:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_Property",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"propertystatus": {},
																	"managementarea": {},
																	"propertybuildtype": {},
																	"parish": {},
																	"tenancy": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - Property",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Property",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.00:10:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_addressline1",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_addressline1",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_addressline2",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_addressline2",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_addressline3",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_addressline3",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_addressline4",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_addresstowncity",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_blockreference",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_blockreference",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_builddate",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_builddate",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_propertybuildtypeid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_buildtypeid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_dateoffinaldisposal",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_dateoffinaldisposal",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_electricmeterserialnumber",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_electricmeterserialnumber",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_estatecode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_estatecode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_floorplanurl",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_floorplanurl",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_fuelservicedate",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_fuelservicedate",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_gasmeterserialnumber",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_gasmeterserialnumber",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_managementareaid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_managementareaid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_maximumnumberofoccupants",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_maximumnumberofoccupants",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_numberofbathrooms",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_numberofbathrooms",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_numberofbedrooms",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_numberofbedrooms",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_numberoffloors",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_numberoffloors",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_numberofreceptionrooms",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_numberofreceptionrooms",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_ownedbycustomer",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_ownedbycustomer",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_ownedbyphg",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_ownedbyphg",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_parishid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_parishid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_plotnumber",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_plotnumber",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_postcode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_postcode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_propertyfloorlevel",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_propertyfloorlevel",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_tenancyid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_propertystatusid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_propertystatus",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_propertytype",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_propertytype",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_subareacode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_subareacode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_uprn",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_uprn",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_wardcode",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_wardcode",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_sharedownership",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_sharedownership",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_lift",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_lift",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_anyadaptions",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_anyadaptions",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_parkingspace",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_parkingspace",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_cookersupply",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_cookersupply",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_garden",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_garden",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_gascapped",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_gascapped",
																			"type": "Boolean"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "Tenancy",
												"activities": [
													{
														"name": "Stg_to_Trfd - Tenancy",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_Tenancy",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"tenancycategory": {},
																	"tenancytype": {},
																	"transactioncurrency": {},
																	"property": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - Tenancy",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Tenancy",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_balance",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_balance",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_rentcharges",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_rentcharges",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancycategoryid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_tenancycategoryid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancyenddate",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_tenancyenddate",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancystartdate",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_tenancystartdate",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancytypeid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_tenancytypeid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_urn",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_urn",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "transactioncurrencyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "transactioncurrencyid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_propertyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_propertyid",
																			"type": "Guid"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "Contact",
												"activities": [
													{
														"name": "Stg_to_Trfd - Contact",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_Contact",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"ethnicgroup": {},
																	"religion": {},
																	"nationality": {},
																	"sexuality": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - Contact",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Contact",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "donotbulkemail",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "donotbulkemail",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "donotemail",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "donotemail",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "donotphone",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "donotphone",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "donotpostalmail",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "donotpostalmail",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "emailaddress1",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "emailaddress1",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "firstname",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "firstname",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "fullname",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "fullname",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "lastname",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "lastname",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "middlename",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "middlename",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "mobilephone",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "mobilephone",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_age",
																			"type": "Int32",
																			"physicalType": "Int32"
																		},
																		"sink": {
																			"name": "phg_age",
																			"type": "Int32"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_dateofbirth",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_dateofbirth",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_dateofdeath",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_dateofdeath",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_ethnicgroup",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_ethnicgroup",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_lastloggedin",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_lastloggedin",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_nationaility",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_nationaility",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_ninumber",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_ninumber",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_previousname",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_previousname",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_registeredonportal",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_registeredonportal",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_relgion",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_relgion",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_sexuality",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_sexuality",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "telephone2",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "telephone2",
																			"type": "String"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "HousingAccount",
												"activities": [
													{
														"name": "Stg_to_Trfd - Housing Account",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_HousingAccount",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"housingaccounttype": {},
																	"transactioncurrency": {},
																	"tenancy": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - HousingAccount",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Housing Account",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_accountholder1",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_accountholder1",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_accountholder2",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_accountholder2",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_accounttypeid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_accounttypeid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_currentbalance",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_currentbalance",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_grossrent",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_grossrent",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_housingbenefitreceived",
																			"type": "Boolean",
																			"physicalType": "Boolean"
																		},
																		"sink": {
																			"name": "phg_housingbenefitreceived",
																			"type": "Boolean"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_allpayref",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_allpayref",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_netcharge",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_netcharge",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_tenancyid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_totalservicechargeamount",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_totalservicechargeamount",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "transactioncurrencyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "transactioncurrencyid",
																			"type": "Guid"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "Transaction",
												"activities": [
													{
														"name": "Stg_to_Trfd - Transaction",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_Transaction",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"transactiontype": {},
																	"transactioncurrency": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - Transaction",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Transaction",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_balance",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_balance",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_charges",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_charges",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_date",
																			"type": "DateTime",
																			"physicalType": "DateTime"
																		},
																		"sink": {
																			"name": "phg_date",
																			"type": "DateTime"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_debit",
																			"type": "Decimal",
																			"physicalType": "Decimal"
																		},
																		"sink": {
																			"name": "phg_debit",
																			"type": "Decimal"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_transactionnumber",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_transactionnumber",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_transactiontypeid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "phg_transactiontypeid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "transactioncurrencyid",
																			"type": "Guid",
																			"physicalType": "Guid"
																		},
																		"sink": {
																			"name": "transactioncurrencyid",
																			"type": "Guid"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "HouseholdMember",
												"activities": [
													{
														"name": "Stg_to_Trfd - Household Member",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "DF_StagingToTransformed_HouseholdMember",
																"type": "DataFlowReference",
																"parameters": {
																	"DatalakeFilename": {
																		"value": "'@{item().DatalakeFilename}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"Staging": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Staging",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	},
																	"tenancy": {},
																	"contact": {},
																	"Transformed": {
																		"Container": {
																			"value": "@item().DatalakeContainer",
																			"type": "Expression"
																		},
																		"Directory": {
																			"value": "@item().DatalakeDirectory_Transformed",
																			"type": "Expression"
																		},
																		"Filename": {
																			"value": "@item().DatalakeFilename",
																			"type": "Expression"
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "AIR-TTL",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Trfd_to_Dest - HouseholdMember",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Stg_to_Trfd - Household Member",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "CommonDataServiceForAppsSink",
																"writeBatchSize": 10,
																"writeBehavior": "upsert",
																"ignoreNullValues": false,
																"alternateKeyName": {
																	"value": "@item().UpsertKeyColumn",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"dataIntegrationUnits": 2,
															"translator": {
																"type": "TabularTranslator",
																"mappings": [
																	{
																		"source": {
																			"name": "phg_contactid",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_contactid",
																			"type": "Guid"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_integrationkey",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_integrationkey",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_name",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_name",
																			"type": "String"
																		}
																	},
																	{
																		"source": {
																			"name": "phg_tenancyid",
																			"type": "String",
																			"physicalType": "String"
																		},
																		"sink": {
																			"name": "phg_tenancyid",
																			"type": "Guid"
																		}
																	}
																],
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Datalake_PipeDelimited",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().DatalakeContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().DatalakeDirectory_Transformed",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@item().DatalakeFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Dataverse_Eval",
																"type": "DatasetReference",
																"parameters": {
																	"EntityName": {
																		"value": "@item().DestEntity",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:03:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_Property')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AIR-TTL')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse_Eval')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_Tenancy')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_Contact')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_HousingAccount')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_Transaction')]",
				"[concat(variables('factoryId'), '/dataflows/DF_StagingToTransformed_HouseholdMember')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_D365Lookups')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "D365Entities",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_EntityParameters]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "D365Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "D365Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('D365Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "D365 to Datalake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse_Eval",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": "a"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_D365",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T13:36:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse_Eval')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Initialise')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Reference Entity Code Map to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table adf.ReferenceEntityCodeMap",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SourceSystem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SourceSystem",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SourceSchema",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SourceSchema",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SourceTable",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SourceTable",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SourceCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SourceCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Entity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EntityQualifiedName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EntityQualifiedName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EntityCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EntityCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EntityValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EntityValue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Excel_ReferenceEntityCodeMap",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_OnPrem_Tbl",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"SchemaName": "adf",
									"TableName": "ReferenceEntityCodeMap"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Excel_ReferenceEntityCodeMap')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ReferenceEntities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Reference_Entities",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spGet_PipelineParameters_Entities]",
								"storedProcedureParameters": {
									"entityType": {
										"type": "String",
										"value": "Reference"
									},
									"pipeline": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									},
									"sequenceGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SequenceGroup",
											"type": "Expression"
										}
									},
									"srcSystem": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Entity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Reference_Entities",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Reference_Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Staging",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Staging",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Source to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": {
												"value": "@concat(item().SrcSchema,'.',item().SrcStoredProcedure)",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"dtLastPipelineRun": {
													"type": "DateTime",
													"value": {
														"value": "@convertToUtc('01/01/2023 00:00:00', 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().SrcSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Staging",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Transformed to Destination",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Staging to Transformed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 10,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"alternateKeyName": {
												"value": "@item().UpsertKeyColumn",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "phg_integrationkey"
													},
													"sink": {
														"name": "phg_integrationkey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "phg_code"
													},
													"sink": {
														"name": "phg_code",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "phg_name"
													},
													"sink": {
														"name": "phg_name",
														"type": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Dataverse_Eval",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Transformed",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Write to PipelineLog",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Transformed to Destination",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('Transformed to Destination').output.rowsCopied}' as RowsCopied,\n'@{activity('Transformed to Destination').output.rowsRead}' as RowsRead,\n'@{activity('Transformed to Destination').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Transformed to Destination').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Transformed to Destination').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n'@{activity('Transformed to Destination').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Transformed to Destination').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Transformed to Destination').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Transformed to Destination').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Transformed to Destination').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineLog"
											}
										}
									]
								},
								{
									"name": "Write to PipelineLog_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Source to Staging",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunID,\n'@{item().SrcStoredProcedure}' as Source,\n'@{item().DestEntity}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerID,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('Source to Staging').output.rowsCopied}' as RowsCopied,\n'@{activity('Source to Staging').output.rowsRead}' as RowsRead,\n'@{activity('Source to Staging').output.usedParallelCopies}' as ParallelCopies,\n'@{activity('Source to Staging').output.copyDuration}' as CopyDuration_SS,\n'@{activity('Source to Staging').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n'@{activity('Source to Staging').output.executionDetails[0].source.type}' as SourceType,\n'@{activity('Source to Staging').output.executionDetails[0].sink.type}' as SinkType,\n'@{activity('Source to Staging').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Source to Staging').output.executionDetails[0].start}' as CopyActivity_StartTime,\n'@{utcnow()}' as CopyActivity_EndTime,\n'@{activity('Source to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_QueuingDuration_SS,\n'@{activity('Source to Staging').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_TimeToFirstByte_SS,\n'@{activity('Source to Staging').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_TransferDuration_SS",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_Control",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_Control_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "dbo",
												"TableName": "PipelineLog"
											}
										}
									]
								},
								{
									"name": "Staging to Transformed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Source to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "phg_code"
													},
													"sink": {
														"name": "phg_code"
													}
												},
												{
													"source": {
														"name": "phg_name"
													},
													"sink": {
														"name": "phg_name"
													}
												},
												{
													"source": {
														"name": "phg_integrationkey"
													},
													"sink": {
														"name": "phg_integrationkey"
													}
												},
												{
													"source": {
														"name": "destination"
													},
													"sink": {
														"name": "destination"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Staging",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Datalake_PipeDelimited_Reference",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().DatalakeContainer",
													"type": "Expression"
												},
												"Directory": {
													"value": "@item().DatalakeDirectory_Transformed",
													"type": "Expression"
												},
												"Filename": {
													"value": "@item().DatalakeFilename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Destination to Source",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Transformed to Destination",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@item().FetchXML",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().UpsertKeyColumn",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Dataverse_Eval",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": "a"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_OnPrem_Tbl",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@item().SrcServer",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().SrcDatabase",
													"type": "Expression"
												},
												"SchemaName": "d365",
												"TableName": {
													"value": "@item().DestEntity",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineName": {
						"type": "string"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"SequenceGroup": {
						"type": "int"
					}
				},
				"folder": {
					"name": "OH_D365_DataSync/Child Packages"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-15T20:38:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control')]",
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited_Reference')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataverse_Eval')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Control_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_OnPrem_Tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_CommaDelimited')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Datalake_PipeDelimited_Reference')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_code",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					},
					{
						"name": "destination",
						"type": "String"
					},
					{
						"name": "modified",
						"type": "String"
					},
					{
						"name": "created",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Dataverse_Eval')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "phg_eval_dataverse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EntityName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": {
						"value": "@dataset().EntityName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/phg_eval_dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel_ReferenceEntityCodeMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/Config"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ReferenceEntityCodeMap",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ReferenceEntityCodeMap.xlsx",
						"folderPath": "OH_D365_DataSync/Config",
						"fileSystem": "data-sync"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "SourceSystem",
						"type": "String"
					},
					{
						"name": "SourceSchema",
						"type": "String"
					},
					{
						"name": "SourceTable",
						"type": "String"
					},
					{
						"name": "SourceCode",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "EntityQualifiedName",
						"type": "String"
					},
					{
						"name": "EntityCode",
						"type": "String"
					},
					{
						"name": "EntityValue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Control_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Control",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Control')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_OnPrem_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_OnPrem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "BBP-PRO2SQL-01\\PRO2SQLTEST"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "Pro2_IH"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "co_parish"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_OnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_account')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "account.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "accountid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_contact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "contact.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "contactid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "fullname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_ethnicgroup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_ethnicgroup.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_ethnicgroupid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_housingaccounttype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_housingaccounttype.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_housingaccounttypeid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_managementarea')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_managementarea.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_managementareaid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_nationality')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_nationality.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_nationalityid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_parish')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_parish.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_parishid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_property')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_property.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_propertyid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_propertybuildtype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_propertybuildtype.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_propertybuildtypeid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_propertystatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_propertystatus.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_propertystatusid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_religion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_religion.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_religionid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_sexuality')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_sexuality.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_sexualityid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_tenancy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_tenancy.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_tenancyid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_tenancycategory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_tenancycategory.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_tenancycategoryid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_tenancytype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_tenancytype.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_tenancytypeid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_phg_transactiontype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "phg_transactiontype.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "phg_transactiontypeid",
						"type": "String"
					},
					{
						"name": "phg_integrationkey",
						"type": "String"
					},
					{
						"name": "phg_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_stringmap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "stringmap.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "attributename",
						"type": "String"
					},
					{
						"name": "attributevalue",
						"type": "String"
					},
					{
						"name": "objecttypecode",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					},
					{
						"name": "stringmapid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_transactioncurrency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataLake/D365"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "transactioncurrency.csv",
						"folderPath": "OH_D365_DataSync/D365",
						"fileSystem": "data-sync"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "createdby",
						"type": "String"
					},
					{
						"name": "createdbyname",
						"type": "String"
					},
					{
						"name": "createdbyyominame",
						"type": "String"
					},
					{
						"name": "createdon",
						"type": "String"
					},
					{
						"name": "createdonbehalfby",
						"type": "String"
					},
					{
						"name": "createdonbehalfbyname",
						"type": "String"
					},
					{
						"name": "createdonbehalfbyyominame",
						"type": "String"
					},
					{
						"name": "currencyname",
						"type": "String"
					},
					{
						"name": "currencyprecision",
						"type": "String"
					},
					{
						"name": "currencysymbol",
						"type": "String"
					},
					{
						"name": "entityimage_timestamp",
						"type": "String"
					},
					{
						"name": "entityimage_url",
						"type": "String"
					},
					{
						"name": "entityimageid",
						"type": "String"
					},
					{
						"name": "exchangerate",
						"type": "String"
					},
					{
						"name": "importsequencenumber",
						"type": "String"
					},
					{
						"name": "isocurrencycode",
						"type": "String"
					},
					{
						"name": "modifiedby",
						"type": "String"
					},
					{
						"name": "modifiedbyname",
						"type": "String"
					},
					{
						"name": "modifiedbyyominame",
						"type": "String"
					},
					{
						"name": "modifiedon",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfby",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfbyname",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfbyyominame",
						"type": "String"
					},
					{
						"name": "organizationid",
						"type": "String"
					},
					{
						"name": "overriddencreatedon",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "transactioncurrencyid",
						"type": "String"
					},
					{
						"name": "uniquedscid",
						"type": "String"
					},
					{
						"name": "versionnumber",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Server": {
						"type": "string"
					},
					"Database": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Control')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Control_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_OnPrem_connectionString')]",
					"userName": "[parameters('SqlServer_OnPrem_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_OnPrem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "BBP-Pro2SQL-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/BBP-Pro2SQL-01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/phg_eval_dataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https:\\\\phg-eval-cs.crm11.dynamics.com",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalId": "[parameters('phg_eval_dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('phg_eval_dataverse_servicePrincipalCredential')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AIR-TTL')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 15,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BBP-Pro2SQL-01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Pro2 Integration run time",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_Contact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_ethnicgroup",
								"type": "DatasetReference"
							},
							"name": "ethnicgroup"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_religion",
								"type": "DatasetReference"
							},
							"name": "religion"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_nationality",
								"type": "DatasetReference"
							},
							"name": "nationality"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_sexuality",
								"type": "DatasetReference"
							},
							"name": "sexuality"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectStaging"
						},
						{
							"name": "SelectEthnicGroup"
						},
						{
							"name": "SelectReligion"
						},
						{
							"name": "SelectNationality"
						},
						{
							"name": "SelectSexuality"
						},
						{
							"name": "JoinEthnicGroup"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "JoinReligion"
						},
						{
							"name": "SelectB"
						},
						{
							"name": "JoinNationality"
						},
						{
							"name": "SelectC"
						},
						{
							"name": "JoinSexuality"
						},
						{
							"name": "SelectColumnsForSink"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          fullname as string,",
						"          firstname as string,",
						"          middlename as string,",
						"          lastname as string,",
						"          phg_dateofbirth as date,",
						"          phg_age as integer,",
						"          phg_dateofdeath as date,",
						"          phg_previousname as string,",
						"          phg_ninumber as string,",
						"          emailaddress1 as string,",
						"          telephone2 as string,",
						"          mobilephone as string,",
						"          phg_registeredonportal as boolean,",
						"          phg_lastloggedin as date,",
						"          phg_ethnicgroup as string,",
						"          phg_relgion as string,",
						"          phg_nationaility as string,",
						"          phg_sexuality as string,",
						"          donotemail as boolean,",
						"          donotbulkemail as boolean,",
						"          donotphone as boolean,",
						"          donotpostalmail as boolean,",
						"          modified as timestamp,",
						"          created as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_ethnicgroupid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ethnicgroup",
						"source(output(",
						"          phg_religionid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> religion",
						"source(output(",
						"          phg_nationalityid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> nationality",
						"source(output(",
						"          phg_sexualityid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sexuality",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          fullname,",
						"          firstname,",
						"          middlename,",
						"          lastname,",
						"          phg_dateofbirth,",
						"          phg_age,",
						"          phg_dateofdeath,",
						"          phg_previousname,",
						"          phg_ninumber,",
						"          emailaddress1,",
						"          telephone2,",
						"          mobilephone,",
						"          phg_registeredonportal,",
						"          phg_lastloggedin,",
						"          phg_ethnicgroup,",
						"          phg_relgion,",
						"          phg_nationaility,",
						"          phg_sexuality,",
						"          donotemail,",
						"          donotbulkemail,",
						"          donotphone,",
						"          donotpostalmail",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"ethnicgroup select(mapColumn(",
						"          phg_ethnicgroupid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicGroup",
						"religion select(mapColumn(",
						"          phg_religionid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReligion",
						"nationality select(mapColumn(",
						"          phg_nationalityid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNationality",
						"sexuality select(mapColumn(",
						"          phg_sexualityid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSexuality",
						"SelectStaging, SelectEthnicGroup join(phg_ethnicgroup == SelectEthnicGroup@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthnicGroup",
						"JoinEthnicGroup select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          fullname,",
						"          firstname,",
						"          middlename,",
						"          lastname,",
						"          phg_dateofbirth,",
						"          phg_age,",
						"          phg_dateofdeath,",
						"          phg_previousname,",
						"          phg_ninumber,",
						"          emailaddress1,",
						"          telephone2,",
						"          mobilephone,",
						"          phg_registeredonportal,",
						"          phg_lastloggedin,",
						"          phg_ethnicgroup = phg_ethnicgroupid,",
						"          phg_relgion,",
						"          phg_nationaility,",
						"          phg_sexuality,",
						"          donotemail,",
						"          donotbulkemail,",
						"          donotphone,",
						"          donotpostalmail",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"SelectA, SelectReligion join(phg_relgion == SelectReligion@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinReligion",
						"JoinReligion select(mapColumn(",
						"          phg_integrationkey = SelectA@phg_integrationkey,",
						"          fullname,",
						"          firstname,",
						"          middlename,",
						"          lastname,",
						"          phg_dateofbirth,",
						"          phg_age,",
						"          phg_dateofdeath,",
						"          phg_previousname,",
						"          phg_ninumber,",
						"          emailaddress1,",
						"          telephone2,",
						"          mobilephone,",
						"          phg_registeredonportal,",
						"          phg_lastloggedin,",
						"          phg_ethnicgroup,",
						"          phg_relgion = phg_religionid,",
						"          phg_nationaility,",
						"          phg_sexuality,",
						"          donotemail,",
						"          donotbulkemail,",
						"          donotphone,",
						"          donotpostalmail",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectB",
						"SelectB, SelectNationality join(phg_nationaility == SelectNationality@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinNationality",
						"JoinNationality select(mapColumn(",
						"          phg_integrationkey = SelectB@phg_integrationkey,",
						"          fullname,",
						"          firstname,",
						"          middlename,",
						"          lastname,",
						"          phg_dateofbirth,",
						"          phg_age,",
						"          phg_dateofdeath,",
						"          phg_previousname,",
						"          phg_ninumber,",
						"          emailaddress1,",
						"          telephone2,",
						"          mobilephone,",
						"          phg_registeredonportal,",
						"          phg_lastloggedin,",
						"          phg_ethnicgroup,",
						"          phg_relgion,",
						"          phg_nationaility = phg_nationalityid,",
						"          phg_sexuality,",
						"          donotemail,",
						"          donotbulkemail,",
						"          donotphone,",
						"          donotpostalmail",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectC",
						"SelectC, SelectSexuality join(phg_sexuality == SelectSexuality@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSexuality",
						"JoinSexuality select(mapColumn(",
						"          phg_integrationkey = SelectC@phg_integrationkey,",
						"          fullname,",
						"          firstname,",
						"          middlename,",
						"          lastname,",
						"          phg_dateofbirth,",
						"          phg_age,",
						"          phg_dateofdeath,",
						"          phg_previousname,",
						"          phg_ninumber,",
						"          emailaddress1,",
						"          telephone2,",
						"          mobilephone,",
						"          phg_registeredonportal,",
						"          phg_lastloggedin,",
						"          phg_ethnicgroup,",
						"          phg_relgion,",
						"          phg_nationaility,",
						"          phg_sexuality = phg_sexualityid,",
						"          donotemail,",
						"          donotbulkemail,",
						"          donotphone,",
						"          donotpostalmail",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_ethnicgroup')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_religion')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_nationality')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_sexuality')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_HouseholdMember')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_tenancy",
								"type": "DatasetReference"
							},
							"name": "tenancy"
						},
						{
							"dataset": {
								"referenceName": "DS_contact",
								"type": "DatasetReference"
							},
							"name": "contact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectStaging"
						},
						{
							"name": "SelectTenancy"
						},
						{
							"name": "SelectContact"
						},
						{
							"name": "JoinTenancy"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "JoinContact"
						},
						{
							"name": "SelectColumnsForSink"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          phg_name as string,",
						"          phg_contactid as string,",
						"          phg_tenancyid as string,",
						"          phg_type as string,",
						"          modified as string,",
						"          created as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_tenancyid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> tenancy",
						"source(output(",
						"          contactid as string,",
						"          phg_integrationkey as string,",
						"          fullname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> contact",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_contactid,",
						"          phg_tenancyid,",
						"          phg_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"tenancy select(mapColumn(",
						"          phg_tenancyid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTenancy",
						"contact select(mapColumn(",
						"          contactid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectContact",
						"SelectStaging, SelectTenancy join(SelectStaging@phg_tenancyid == SelectTenancy@phg_integrationkey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTenancy",
						"JoinTenancy select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          phg_name,",
						"          phg_contactid,",
						"          phg_tenancyid = SelectTenancy@phg_tenancyid,",
						"          phg_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"SelectA, SelectContact join(phg_contactid == SelectContact@phg_integrationkey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinContact",
						"JoinContact select(mapColumn(",
						"          phg_integrationkey = SelectA@phg_integrationkey,",
						"          phg_name,",
						"          phg_contactid = contactid,",
						"          phg_tenancyid,",
						"          phg_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_tenancy')]",
				"[concat(variables('factoryId'), '/datasets/DS_contact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_HousingAccount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_housingaccounttype",
								"type": "DatasetReference"
							},
							"name": "housingaccounttype"
						},
						{
							"dataset": {
								"referenceName": "DS_transactioncurrency",
								"type": "DatasetReference"
							},
							"name": "transactioncurrency"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_tenancy",
								"type": "DatasetReference"
							},
							"name": "tenancy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectHouisngAccountType"
						},
						{
							"name": "SelectStaging"
						},
						{
							"name": "JoinHousingAccountType"
						},
						{
							"name": "SelectColumnsForSink"
						},
						{
							"name": "SelectTransactionCurrency"
						},
						{
							"name": "ISOCurrencyCode"
						},
						{
							"name": "JoinTransactionCurrency"
						},
						{
							"name": "SelectTenancy"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "JoinTenancy"
						},
						{
							"name": "SelectB"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          phg_name as string,",
						"          phg_accountholder1 as string,",
						"          phg_accountholder2 as string,",
						"          phg_accounttypeid as string,",
						"          phg_allpayref as string,",
						"          phg_currentbalance as decimal(10,0),",
						"          phg_grossrent as decimal(10,0),",
						"          phg_netcharge as decimal(10,0),",
						"          phg_totalservicechargeamount as decimal(10,0),",
						"          phg_housingbenefitreceived as boolean,",
						"          phg_tenancyid as string,",
						"          modified as timestamp,",
						"          created as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_housingaccounttypeid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> housingaccounttype",
						"source(output(",
						"          createdby as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as string,",
						"          createdonbehalfby as string,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          currencyname as string,",
						"          currencyprecision as string,",
						"          currencysymbol as string,",
						"          entityimage_timestamp as string,",
						"          entityimage_url as string,",
						"          entityimageid as string,",
						"          exchangerate as string,",
						"          importsequencenumber as string,",
						"          isocurrencycode as string,",
						"          modifiedby as string,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as string,",
						"          modifiedonbehalfby as string,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          organizationid as string,",
						"          overriddencreatedon as string,",
						"          statecode as string,",
						"          statuscode as string,",
						"          transactioncurrencyid as string,",
						"          uniquedscid as string,",
						"          versionnumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> transactioncurrency",
						"source(output(",
						"          phg_tenancyid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> tenancy",
						"housingaccounttype select(mapColumn(",
						"          phg_housingaccounttypeid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHouisngAccountType",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_accountholder1,",
						"          phg_accountholder2,",
						"          phg_accounttypeid,",
						"          phg_currentbalance,",
						"          phg_grossrent,",
						"          phg_netcharge,",
						"          phg_totalservicechargeamount,",
						"          phg_housingbenefitreceived,",
						"          phg_allpayref,",
						"          phg_tenancyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"SelectStaging, SelectHouisngAccountType join(phg_accounttypeid == SelectHouisngAccountType@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinHousingAccountType",
						"JoinTransactionCurrency select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_accountholder1,",
						"          phg_accountholder2,",
						"          phg_accounttypeid,",
						"          phg_currentbalance,",
						"          phg_grossrent,",
						"          phg_netcharge,",
						"          phg_totalservicechargeamount,",
						"          phg_housingbenefitreceived,",
						"          phg_allpayref,",
						"          phg_tenancyid,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"transactioncurrency select(mapColumn(",
						"          currencyname,",
						"          isocurrencycode,",
						"          statecode,",
						"          statuscode,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTransactionCurrency",
						"SelectB derive(isocurrencycode = \"GBP\") ~> ISOCurrencyCode",
						"ISOCurrencyCode, SelectTransactionCurrency join(ISOCurrencyCode@isocurrencycode == SelectTransactionCurrency@isocurrencycode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTransactionCurrency",
						"tenancy select(mapColumn(",
						"          phg_tenancyid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTenancy",
						"JoinHousingAccountType select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          phg_name,",
						"          phg_accountholder1,",
						"          phg_accountholder2,",
						"          phg_accounttypeid = phg_housingaccounttypeid,",
						"          phg_currentbalance,",
						"          phg_grossrent,",
						"          phg_netcharge,",
						"          phg_totalservicechargeamount,",
						"          phg_housingbenefitreceived,",
						"          phg_allpayref,",
						"          phg_tenancyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"SelectA, SelectTenancy join(SelectA@phg_tenancyid == SelectTenancy@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTenancy",
						"JoinTenancy select(mapColumn(",
						"          phg_integrationkey = SelectA@phg_integrationkey,",
						"          phg_name,",
						"          phg_accountholder1,",
						"          phg_accountholder2,",
						"          phg_accounttypeid,",
						"          phg_currentbalance,",
						"          phg_grossrent,",
						"          phg_netcharge,",
						"          phg_totalservicechargeamount,",
						"          phg_housingbenefitreceived,",
						"          phg_allpayref,",
						"          phg_tenancyid = SelectTenancy@phg_tenancyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectB",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_housingaccounttype')]",
				"[concat(variables('factoryId'), '/datasets/DS_transactioncurrency')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_tenancy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_Property')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_propertystatus",
								"type": "DatasetReference"
							},
							"name": "propertystatus"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_managementarea",
								"type": "DatasetReference"
							},
							"name": "managementarea"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_propertybuildtype",
								"type": "DatasetReference"
							},
							"name": "propertybuildtype"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_parish",
								"type": "DatasetReference"
							},
							"name": "parish"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_tenancy",
								"type": "DatasetReference"
							},
							"name": "tenancy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsForSink"
						},
						{
							"name": "JoinPropertyStatus"
						},
						{
							"name": "JoinManagementArea"
						},
						{
							"name": "JoinPropertyBuildType"
						},
						{
							"name": "JoinParish"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "SelectB"
						},
						{
							"name": "SelectC"
						},
						{
							"name": "SelectD"
						},
						{
							"name": "SelectStaging"
						},
						{
							"name": "SelectPropertyStatus"
						},
						{
							"name": "SelectManagementArea"
						},
						{
							"name": "SelectPropertyBuildType"
						},
						{
							"name": "SelectParish"
						},
						{
							"name": "SelectTenancy"
						},
						{
							"name": "JoinTenancy"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          phg_addressline1 as string,",
						"          phg_addressline2 as string,",
						"          phg_addressline3 as string,",
						"          phg_addressline4 as string,",
						"          phg_postcode as string,",
						"          phg_name as string,",
						"          phg_uprn as string,",
						"          phg_propertytype as string,",
						"          phg_sharedownership as boolean,",
						"          phg_numberoffloors as integer,",
						"          phg_propertyfloorlevel as integer,",
						"          phg_numberofbedrooms as integer,",
						"          phg_numberofbathrooms as integer,",
						"          phg_numberofreceptionrooms as integer,",
						"          phg_maximumnumberofoccupants as integer,",
						"          phg_lift as boolean,",
						"          phg_anyadaptions as boolean,",
						"          phg_blockreference as string,",
						"          phg_tenancyid as string,",
						"          phg_plotnumber as integer,",
						"          phg_builddate as date,",
						"          phg_floorplanurl as string,",
						"          phg_parkingspace as boolean,",
						"          phg_dateoffinaldisposal as date,",
						"          phg_cookersupply as boolean,",
						"          phg_garden as boolean,",
						"          phg_wardcode as string,",
						"          phg_estatecode as string,",
						"          phg_subareacode as string,",
						"          phg_gascapped as boolean,",
						"          phg_fuelservicedate as date,",
						"          phg_ownedbycustomer as double,",
						"          phg_ownedbyphg as double,",
						"          phg_gasmeterserialnumber as string,",
						"          phg_electricmeterserialnumber as string,",
						"          phg_propertystatusid as string,",
						"          phg_managementareaid as string,",
						"          phg_buildtypeid as string,",
						"          phg_parishid as string,",
						"          modified as timestamp,",
						"          created as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_propertystatusid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> propertystatus",
						"source(output(",
						"          phg_managementareaid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> managementarea",
						"source(output(",
						"          phg_propertybuildtypeid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> propertybuildtype",
						"source(output(",
						"          phg_parishid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> parish",
						"source(output(",
						"          phg_tenancyid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> tenancy",
						"JoinTenancy select(mapColumn(",
						"          phg_integrationkey = SelectD@phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid = SelectTenancy@phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          phg_propertystatusid,",
						"          phg_managementareaid,",
						"          phg_parishid,",
						"          phg_propertybuildtypeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"SelectStaging, SelectPropertyStatus join(ref_phg_propertystatusid == SelectPropertyStatus@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPropertyStatus",
						"SelectA, SelectManagementArea join(ref_phg_managementareaid == SelectManagementArea@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinManagementArea",
						"SelectB, SelectPropertyBuildType join(ref_phg_propertybuildtypeid == SelectPropertyBuildType@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPropertyBuildType",
						"SelectC, SelectParish join(ref_phg_parishid == SelectParish@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinParish",
						"JoinPropertyStatus select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          phg_propertystatusid,",
						"          ref_phg_managementareaid,",
						"          ref_phg_propertybuildtypeid,",
						"          ref_phg_parishid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"JoinManagementArea select(mapColumn(",
						"          phg_integrationkey = SelectA@phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          phg_propertystatusid,",
						"          ref_phg_propertybuildtypeid,",
						"          ref_phg_parishid,",
						"          phg_managementareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectB",
						"JoinPropertyBuildType select(mapColumn(",
						"          phg_integrationkey = SelectB@phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          phg_propertystatusid,",
						"          ref_phg_parishid,",
						"          phg_managementareaid,",
						"          phg_propertybuildtypeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectC",
						"JoinParish select(mapColumn(",
						"          phg_integrationkey = SelectC@phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          phg_propertystatusid,",
						"          phg_managementareaid,",
						"          phg_propertybuildtypeid,",
						"          phg_parishid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectD",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_addressline1,",
						"          phg_addressline2,",
						"          phg_addressline3,",
						"          phg_addressline4,",
						"          phg_postcode,",
						"          phg_name,",
						"          phg_uprn,",
						"          phg_propertytype,",
						"          phg_sharedownership,",
						"          phg_numberoffloors,",
						"          phg_propertyfloorlevel,",
						"          phg_numberofbedrooms,",
						"          phg_numberofbathrooms,",
						"          phg_numberofreceptionrooms,",
						"          phg_maximumnumberofoccupants,",
						"          phg_lift,",
						"          phg_anyadaptions,",
						"          phg_blockreference,",
						"          phg_tenancyid,",
						"          phg_plotnumber,",
						"          phg_builddate,",
						"          phg_floorplanurl,",
						"          phg_parkingspace,",
						"          phg_dateoffinaldisposal,",
						"          phg_cookersupply,",
						"          phg_garden,",
						"          phg_wardcode,",
						"          phg_estatecode,",
						"          phg_subareacode,",
						"          phg_gascapped,",
						"          phg_fuelservicedate,",
						"          phg_ownedbycustomer,",
						"          phg_ownedbyphg,",
						"          phg_gasmeterserialnumber,",
						"          phg_electricmeterserialnumber,",
						"          ref_phg_propertystatusid = phg_propertystatusid,",
						"          ref_phg_managementareaid = phg_managementareaid,",
						"          ref_phg_propertybuildtypeid = phg_buildtypeid,",
						"          ref_phg_parishid = phg_parishid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"propertystatus select(mapColumn(",
						"          phg_propertystatusid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPropertyStatus",
						"managementarea select(mapColumn(",
						"          phg_managementareaid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectManagementArea",
						"propertybuildtype select(mapColumn(",
						"          phg_propertybuildtypeid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPropertyBuildType",
						"parish select(mapColumn(",
						"          phg_parishid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectParish",
						"tenancy select(mapColumn(",
						"          phg_tenancyid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTenancy",
						"SelectD, SelectTenancy join(SelectD@phg_tenancyid == SelectTenancy@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTenancy",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_propertystatus')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_managementarea')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_propertybuildtype')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_parish')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_tenancy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_Tenancy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_tenancycategory",
								"type": "DatasetReference"
							},
							"name": "tenancycategory"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_tenancytype",
								"type": "DatasetReference"
							},
							"name": "tenancytype"
						},
						{
							"dataset": {
								"referenceName": "DS_transactioncurrency",
								"type": "DatasetReference"
							},
							"name": "transactioncurrency"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_property",
								"type": "DatasetReference"
							},
							"name": "property"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectTenancyCategory"
						},
						{
							"name": "SelectTenancyType"
						},
						{
							"name": "SelectStaging"
						},
						{
							"name": "JoinTenancyCategory"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "JoinTenancyType"
						},
						{
							"name": "SelectColumnsForSink"
						},
						{
							"name": "SelectTransactionCurrency"
						},
						{
							"name": "ISOCurrencyCode"
						},
						{
							"name": "JoinTransactionCurrency"
						},
						{
							"name": "SelectProperty"
						},
						{
							"name": "SelectB"
						},
						{
							"name": "JoinProperty"
						},
						{
							"name": "SelectC"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          phg_name as string,",
						"          phg_urn as long,",
						"          phg_tenancycategoryid as string,",
						"          phg_tenancytypeid as string,",
						"          phg_tenancystartdate as string,",
						"          phg_tenancyenddate as string,",
						"          phg_propertyid as string,",
						"          phg_balance as double,",
						"          phg_rentcharges as double,",
						"          modified as string,",
						"          created as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_tenancycategoryid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> tenancycategory",
						"source(output(",
						"          phg_tenancytypeid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> tenancytype",
						"source(output(",
						"          createdby as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as string,",
						"          createdonbehalfby as string,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          currencyname as string,",
						"          currencyprecision as string,",
						"          currencysymbol as string,",
						"          entityimage_timestamp as string,",
						"          entityimage_url as string,",
						"          entityimageid as string,",
						"          exchangerate as string,",
						"          importsequencenumber as string,",
						"          isocurrencycode as string,",
						"          modifiedby as string,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as string,",
						"          modifiedonbehalfby as string,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          organizationid as string,",
						"          overriddencreatedon as string,",
						"          statecode as string,",
						"          statuscode as string,",
						"          transactioncurrencyid as string,",
						"          uniquedscid as string,",
						"          versionnumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> transactioncurrency",
						"source(output(",
						"          phg_propertyid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> property",
						"tenancycategory select(mapColumn(",
						"          phg_tenancycategoryid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTenancyCategory",
						"tenancytype select(mapColumn(",
						"          phg_tenancytypeid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTenancyType",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_urn,",
						"          phg_tenancycategoryid,",
						"          phg_tenancytypeid,",
						"          phg_tenancystartdate,",
						"          phg_tenancyenddate,",
						"          phg_propertyid,",
						"          phg_balance,",
						"          phg_rentcharges",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"SelectStaging, SelectTenancyCategory join(SelectStaging@phg_tenancycategoryid == SelectTenancyCategory@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTenancyCategory",
						"JoinTenancyCategory select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          phg_name,",
						"          phg_urn,",
						"          phg_tenancycategoryid = SelectTenancyCategory@phg_tenancycategoryid,",
						"          phg_tenancytypeid,",
						"          phg_tenancystartdate,",
						"          phg_tenancyenddate,",
						"          phg_propertyid,",
						"          phg_balance,",
						"          phg_rentcharges",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"SelectA, SelectTenancyType join(SelectA@phg_tenancytypeid == SelectTenancyType@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTenancyType",
						"JoinTransactionCurrency select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_urn,",
						"          phg_tenancycategoryid,",
						"          phg_tenancytypeid,",
						"          phg_tenancystartdate,",
						"          phg_tenancyenddate,",
						"          phg_propertyid,",
						"          phg_balance,",
						"          phg_rentcharges,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"transactioncurrency select(mapColumn(",
						"          currencyname,",
						"          isocurrencycode,",
						"          statecode,",
						"          statuscode,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTransactionCurrency",
						"SelectC derive(isocurrencycode = \"GBP\") ~> ISOCurrencyCode",
						"ISOCurrencyCode, SelectTransactionCurrency join(ISOCurrencyCode@isocurrencycode == SelectTransactionCurrency@isocurrencycode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTransactionCurrency",
						"property select(mapColumn(",
						"          phg_propertyid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProperty",
						"JoinTenancyType select(mapColumn(",
						"          phg_integrationkey = SelectA@phg_integrationkey,",
						"          phg_name,",
						"          phg_urn,",
						"          phg_tenancycategoryid,",
						"          phg_tenancytypeid = SelectTenancyType@phg_tenancytypeid,",
						"          phg_tenancystartdate,",
						"          phg_tenancyenddate,",
						"          phg_propertyid,",
						"          phg_balance,",
						"          phg_rentcharges",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectB",
						"SelectB, SelectProperty join(SelectB@phg_propertyid == SelectProperty@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinProperty",
						"JoinProperty select(mapColumn(",
						"          phg_integrationkey = SelectB@phg_integrationkey,",
						"          phg_name,",
						"          phg_urn,",
						"          phg_tenancycategoryid,",
						"          phg_tenancytypeid,",
						"          phg_tenancystartdate,",
						"          phg_tenancyenddate,",
						"          phg_propertyid = SelectProperty@phg_propertyid,",
						"          phg_balance,",
						"          phg_rentcharges",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectC",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_tenancycategory')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_tenancytype')]",
				"[concat(variables('factoryId'), '/datasets/DS_transactioncurrency')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_property')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_StagingToTransformed_Transaction')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OH_D365_DataSync/Core"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Staging"
						},
						{
							"dataset": {
								"referenceName": "DS_phg_transactiontype",
								"type": "DatasetReference"
							},
							"name": "transactiontype"
						},
						{
							"dataset": {
								"referenceName": "DS_transactioncurrency",
								"type": "DatasetReference"
							},
							"name": "transactioncurrency"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_PipeDelimited",
								"type": "DatasetReference"
							},
							"name": "Transformed"
						}
					],
					"transformations": [
						{
							"name": "SelectTransactionType"
						},
						{
							"name": "SelectStaging"
						},
						{
							"name": "JoinTransactionType"
						},
						{
							"name": "SelectA"
						},
						{
							"name": "SelectTransactionCurrency"
						},
						{
							"name": "ISOCurrencyCode"
						},
						{
							"name": "JoinTransactionCurrency"
						},
						{
							"name": "SelectColumnsForSink"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DatalakeFilename as string",
						"}",
						"source(output(",
						"          phg_integrationkey as string,",
						"          phg_name as string,",
						"          phg_date as string,",
						"          phg_transactionnumber as string,",
						"          phg_transactiontypeid as string,",
						"          phg_balance as decimal(10,0),",
						"          phg_charges as decimal(10,0),",
						"          phg_debit as decimal(10,0),",
						"          modified as string,",
						"          created as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Staging",
						"source(output(",
						"          phg_transactiontypeid as string,",
						"          phg_integrationkey as string,",
						"          phg_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> transactiontype",
						"source(output(",
						"          createdby as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as string,",
						"          createdonbehalfby as string,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          currencyname as string,",
						"          currencyprecision as string,",
						"          currencysymbol as string,",
						"          entityimage_timestamp as string,",
						"          entityimage_url as string,",
						"          entityimageid as string,",
						"          exchangerate as string,",
						"          importsequencenumber as string,",
						"          isocurrencycode as string,",
						"          modifiedby as string,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as string,",
						"          modifiedonbehalfby as string,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          organizationid as string,",
						"          overriddencreatedon as string,",
						"          statecode as string,",
						"          statuscode as string,",
						"          transactioncurrencyid as string,",
						"          uniquedscid as string,",
						"          versionnumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> transactioncurrency",
						"transactiontype select(mapColumn(",
						"          phg_transactiontypeid,",
						"          phg_integrationkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTransactionType",
						"Staging select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_date,",
						"          phg_transactionnumber,",
						"          phg_transactiontypeid,",
						"          phg_balance,",
						"          phg_charges,",
						"          phg_debit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStaging",
						"SelectStaging, SelectTransactionType join(SelectStaging@phg_transactiontypeid == SelectTransactionType@phg_integrationkey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTransactionType",
						"JoinTransactionType select(mapColumn(",
						"          phg_integrationkey = SelectStaging@phg_integrationkey,",
						"          phg_name,",
						"          phg_date,",
						"          phg_transactionnumber,",
						"          phg_transactiontypeid = SelectTransactionType@phg_transactiontypeid,",
						"          phg_balance,",
						"          phg_charges,",
						"          phg_debit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectA",
						"transactioncurrency select(mapColumn(",
						"          currencyname,",
						"          isocurrencycode,",
						"          statecode,",
						"          statuscode,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTransactionCurrency",
						"SelectA derive(isocurrencycode = \"GBP\") ~> ISOCurrencyCode",
						"ISOCurrencyCode, SelectTransactionCurrency join(ISOCurrencyCode@isocurrencycode == SelectTransactionCurrency@isocurrencycode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTransactionCurrency",
						"JoinTransactionCurrency select(mapColumn(",
						"          phg_integrationkey,",
						"          phg_name,",
						"          phg_date,",
						"          phg_transactionnumber,",
						"          phg_transactiontypeid,",
						"          phg_balance,",
						"          phg_charges,",
						"          phg_debit,",
						"          transactioncurrencyid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
						"SelectColumnsForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DatalakeFilename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Transformed"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Datalake_PipeDelimited')]",
				"[concat(variables('factoryId'), '/datasets/DS_phg_transactiontype')]",
				"[concat(variables('factoryId'), '/datasets/DS_transactioncurrency')]"
			]
		}
	]
}