{
	"name": "DF_StagingToTransformed_HouseholdMember",
	"properties": {
		"folder": {
			"name": "OH_D365_DataSync/Core"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited",
						"type": "DatasetReference"
					},
					"name": "Staging"
				},
				{
					"dataset": {
						"referenceName": "DS_phg_tenancy",
						"type": "DatasetReference"
					},
					"name": "tenancy"
				},
				{
					"dataset": {
						"referenceName": "DS_contact",
						"type": "DatasetReference"
					},
					"name": "contact"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited",
						"type": "DatasetReference"
					},
					"name": "Transformed"
				}
			],
			"transformations": [
				{
					"name": "SelectStaging"
				},
				{
					"name": "SelectTenancy"
				},
				{
					"name": "SelectContact"
				},
				{
					"name": "JoinTenancy"
				},
				{
					"name": "SelectA"
				},
				{
					"name": "JoinContact"
				},
				{
					"name": "SelectColumnsForSink"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DatalakeFilename as string",
				"}",
				"source(output(",
				"          phg_integrationkey as string,",
				"          phg_name as string,",
				"          phg_contactid as string,",
				"          phg_tenancyid as string,",
				"          phg_type as string,",
				"          modified as string,",
				"          created as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Staging",
				"source(output(",
				"          phg_tenancyid as string,",
				"          phg_integrationkey as string,",
				"          phg_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> tenancy",
				"source(output(",
				"          contactid as string,",
				"          phg_integrationkey as string,",
				"          fullname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> contact",
				"Staging select(mapColumn(",
				"          phg_integrationkey,",
				"          phg_name,",
				"          phg_contactid,",
				"          phg_tenancyid,",
				"          phg_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectStaging",
				"tenancy select(mapColumn(",
				"          phg_tenancyid,",
				"          phg_integrationkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTenancy",
				"contact select(mapColumn(",
				"          contactid,",
				"          phg_integrationkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectContact",
				"SelectStaging, SelectTenancy join(SelectStaging@phg_tenancyid == SelectTenancy@phg_integrationkey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTenancy",
				"JoinTenancy select(mapColumn(",
				"          phg_integrationkey = SelectStaging@phg_integrationkey,",
				"          phg_name,",
				"          phg_contactid,",
				"          phg_tenancyid = SelectTenancy@phg_tenancyid,",
				"          phg_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectA",
				"SelectA, SelectContact join(phg_contactid == SelectContact@phg_integrationkey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinContact",
				"JoinContact select(mapColumn(",
				"          phg_integrationkey = SelectA@phg_integrationkey,",
				"          phg_name,",
				"          phg_contactid = contactid,",
				"          phg_tenancyid,",
				"          phg_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
				"SelectColumnsForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($DatalakeFilename)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Transformed"
			]
		}
	}
}