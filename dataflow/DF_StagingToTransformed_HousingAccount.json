{
	"name": "DF_StagingToTransformed_HousingAccount",
	"properties": {
		"folder": {
			"name": "OH_D365_DataSync/Core"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited",
						"type": "DatasetReference"
					},
					"name": "Staging"
				},
				{
					"dataset": {
						"referenceName": "DS_phg_housingaccounttype",
						"type": "DatasetReference"
					},
					"name": "housingaccounttype"
				},
				{
					"dataset": {
						"referenceName": "DS_transactioncurrency",
						"type": "DatasetReference"
					},
					"name": "transactioncurrency"
				},
				{
					"dataset": {
						"referenceName": "DS_phg_tenancy",
						"type": "DatasetReference"
					},
					"name": "tenancy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited",
						"type": "DatasetReference"
					},
					"name": "Transformed"
				}
			],
			"transformations": [
				{
					"name": "SelectHouisngAccountType"
				},
				{
					"name": "SelectStaging"
				},
				{
					"name": "JoinHousingAccountType"
				},
				{
					"name": "SelectColumnsForSink"
				},
				{
					"name": "SelectTransactionCurrency"
				},
				{
					"name": "ISOCurrencyCode"
				},
				{
					"name": "JoinTransactionCurrency"
				},
				{
					"name": "SelectTenancy"
				},
				{
					"name": "SelectA"
				},
				{
					"name": "JoinTenancy"
				},
				{
					"name": "SelectB"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DatalakeFilename as string",
				"}",
				"source(output(",
				"          phg_integrationkey as string,",
				"          phg_name as string,",
				"          phg_accountholder1 as string,",
				"          phg_accountholder2 as string,",
				"          phg_accounttypeid as string,",
				"          phg_allpayref as string,",
				"          phg_currentbalance as decimal(10,0),",
				"          phg_grossrent as decimal(10,0),",
				"          phg_netcharge as decimal(10,0),",
				"          phg_totalservicechargeamount as decimal(10,0),",
				"          phg_housingbenefitreceived as boolean,",
				"          phg_tenancyid as string,",
				"          modified as timestamp,",
				"          created as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Staging",
				"source(output(",
				"          phg_housingaccounttypeid as string,",
				"          phg_integrationkey as string,",
				"          phg_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> housingaccounttype",
				"source(output(",
				"          createdby as string,",
				"          createdbyname as string,",
				"          createdbyyominame as string,",
				"          createdon as string,",
				"          createdonbehalfby as string,",
				"          createdonbehalfbyname as string,",
				"          createdonbehalfbyyominame as string,",
				"          currencyname as string,",
				"          currencyprecision as string,",
				"          currencysymbol as string,",
				"          entityimage_timestamp as string,",
				"          entityimage_url as string,",
				"          entityimageid as string,",
				"          exchangerate as string,",
				"          importsequencenumber as string,",
				"          isocurrencycode as string,",
				"          modifiedby as string,",
				"          modifiedbyname as string,",
				"          modifiedbyyominame as string,",
				"          modifiedon as string,",
				"          modifiedonbehalfby as string,",
				"          modifiedonbehalfbyname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          organizationid as string,",
				"          overriddencreatedon as string,",
				"          statecode as string,",
				"          statuscode as string,",
				"          transactioncurrencyid as string,",
				"          uniquedscid as string,",
				"          versionnumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> transactioncurrency",
				"source(output(",
				"          phg_tenancyid as string,",
				"          phg_integrationkey as string,",
				"          phg_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> tenancy",
				"housingaccounttype select(mapColumn(",
				"          phg_housingaccounttypeid,",
				"          phg_integrationkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHouisngAccountType",
				"Staging select(mapColumn(",
				"          phg_integrationkey,",
				"          phg_name,",
				"          phg_accountholder1,",
				"          phg_accountholder2,",
				"          phg_accounttypeid,",
				"          phg_currentbalance,",
				"          phg_grossrent,",
				"          phg_netcharge,",
				"          phg_totalservicechargeamount,",
				"          phg_housingbenefitreceived,",
				"          phg_allpayref,",
				"          phg_tenancyid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectStaging",
				"SelectStaging, SelectHouisngAccountType join(phg_accounttypeid == SelectHouisngAccountType@phg_integrationkey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinHousingAccountType",
				"JoinTransactionCurrency select(mapColumn(",
				"          phg_integrationkey,",
				"          phg_name,",
				"          phg_accountholder1,",
				"          phg_accountholder2,",
				"          phg_accounttypeid,",
				"          phg_currentbalance,",
				"          phg_grossrent,",
				"          phg_netcharge,",
				"          phg_totalservicechargeamount,",
				"          phg_housingbenefitreceived,",
				"          phg_allpayref,",
				"          phg_tenancyid,",
				"          transactioncurrencyid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
				"transactioncurrency select(mapColumn(",
				"          currencyname,",
				"          isocurrencycode,",
				"          statecode,",
				"          statuscode,",
				"          transactioncurrencyid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTransactionCurrency",
				"SelectB derive(isocurrencycode = \"GBP\") ~> ISOCurrencyCode",
				"ISOCurrencyCode, SelectTransactionCurrency join(ISOCurrencyCode@isocurrencycode == SelectTransactionCurrency@isocurrencycode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTransactionCurrency",
				"tenancy select(mapColumn(",
				"          phg_tenancyid,",
				"          phg_integrationkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTenancy",
				"JoinHousingAccountType select(mapColumn(",
				"          phg_integrationkey = SelectStaging@phg_integrationkey,",
				"          phg_name,",
				"          phg_accountholder1,",
				"          phg_accountholder2,",
				"          phg_accounttypeid = phg_housingaccounttypeid,",
				"          phg_currentbalance,",
				"          phg_grossrent,",
				"          phg_netcharge,",
				"          phg_totalservicechargeamount,",
				"          phg_housingbenefitreceived,",
				"          phg_allpayref,",
				"          phg_tenancyid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectA",
				"SelectA, SelectTenancy join(SelectA@phg_tenancyid == SelectTenancy@phg_integrationkey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTenancy",
				"JoinTenancy select(mapColumn(",
				"          phg_integrationkey = SelectA@phg_integrationkey,",
				"          phg_name,",
				"          phg_accountholder1,",
				"          phg_accountholder2,",
				"          phg_accounttypeid,",
				"          phg_currentbalance,",
				"          phg_grossrent,",
				"          phg_netcharge,",
				"          phg_totalservicechargeamount,",
				"          phg_housingbenefitreceived,",
				"          phg_allpayref,",
				"          phg_tenancyid = SelectTenancy@phg_tenancyid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectB",
				"SelectColumnsForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($DatalakeFilename)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Transformed"
			]
		}
	}
}