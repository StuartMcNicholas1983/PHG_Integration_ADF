{
	"name": "DF_StagingToTransformed",
	"properties": {
		"folder": {
			"name": "OH_D365_DataSync/Reference"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited_Reference",
						"type": "DatasetReference"
					},
					"name": "Staging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Datalake_PipeDelimited_Reference",
						"type": "DatasetReference"
					},
					"name": "Transformed"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumns"
				},
				{
					"name": "SelectColumnsForSink"
				}
			],
			"scriptLines": [
				"parameters{",
				"     EntityQualifiedName as string,",
				"     DatalakeFilename as string",
				"}",
				"source(output(",
				"          phg_integrationkey as string,",
				"          phg_code as string,",
				"          phg_name as string,",
				"          destination as string,",
				"          modified as string,",
				"          created as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> Staging",
				"Staging derive(EntityQualifiedName = $EntityQualifiedName,",
				"          Entity_IntegrationKey = code) ~> DerivedColumns",
				"DerivedColumns select(mapColumn(",
				"          EntityQualifiedName,",
				"          Entity_IntegrationKey,",
				"          Entity_Code = code,",
				"          Entity_Name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumnsForSink",
				"SelectColumnsForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          phg_integrationkey as string,",
				"          phg_code as string,",
				"          phg_name as string,",
				"          destination as string,",
				"          modified as string,",
				"          created as string",
				"     ),",
				"     partitionFileNames:[($DatalakeFilename)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Transformed"
			]
		}
	}
}